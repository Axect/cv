<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Axect&#x27;s CV</title>
    <subtitle>Axect&#x27;s CV</subtitle>
    <link rel="self" type="application/atom+xml" href="https://axect.github.io/cv/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://axect.github.io/cv"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2023-11-25T00:00:00+00:00</updated>
    <id>https://axect.github.io/cv/atom.xml</id>
    <entry xml:lang="en">
        <title>Peroxide</title>
        <published>2023-11-25T00:00:00+00:00</published>
        <updated>2023-11-25T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://axect.github.io/cv/projects/peroxide/"/>
        <id>https://axect.github.io/cv/projects/peroxide/</id>
        
        <content type="html" xml:base="https://axect.github.io/cv/projects/peroxide/">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;peroxide&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;img.shields.io&#x2F;crates&#x2F;v&#x2F;peroxide.svg&quot; alt=&quot;On crates.io&quot; &#x2F;&gt;&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;peroxide.surge.sh&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;peroxide&#x2F;badge.svg&quot; alt=&quot;On docs.rs&quot; &#x2F;&gt;&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;builds.sr.ht&#x2F;~axect&#x2F;Peroxide&#x2F;.build.yml?&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;builds.sr.ht&#x2F;~axect&#x2F;Peroxide&#x2F;.build.yml.svg&quot; alt=&quot;builds.sr.ht status&quot; &#x2F;&gt;&lt;&#x2F;a&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;Axect&#x2F;Peroxide&#x2F;workflows&#x2F;Github&#x2F;badge.svg&quot; alt=&quot;github&quot; &#x2F;&gt; 
&lt;img src=&quot;https:&#x2F;&#x2F;img.shields.io&#x2F;badge&#x2F;maintenance-actively--developed-brightgreen.svg&quot; alt=&quot;maintenance&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Rust numeric library contains linear algebra, numerical analysis, statistics and machine learning tools with R, MATLAB, Python like macros.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-peroxide&quot;&gt;Why Peroxide?&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-customize-features&quot;&gt;1. Customize features&lt;&#x2F;h3&gt;
&lt;p&gt;Peroxide provides various features.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;default&lt;&#x2F;code&gt; - Pure Rust (No dependencies of architecture - Perfect cross compilation)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;O3&lt;&#x2F;code&gt; - BLAS &amp;amp; LAPACK (Perfect performance but little bit hard to set-up - Strongly recommend to look &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Axect&#x2F;Peroxide_BLAS&quot;&gt;Peroxide with BLAS&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;plot&lt;&#x2F;code&gt; - With matplotlib of python, we can draw any plots.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;nc&lt;&#x2F;code&gt; - To handle netcdf file format with DataFrame&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;csv&lt;&#x2F;code&gt; - To handle csv file format with Matrix or DataFrame&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;parquet&lt;&#x2F;code&gt; - To handle parquet file format with DataFrame&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;serde&lt;&#x2F;code&gt; - serialization with &lt;a href=&quot;https:&#x2F;&#x2F;serde.rs&#x2F;&quot;&gt;Serde&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If you want to do high performance computation and more linear algebra, then choose &lt;code&gt;O3&lt;&#x2F;code&gt; feature.
If you don&#x27;t want to depend C&#x2F;C++ or Fortran libraries, then choose &lt;code&gt;default&lt;&#x2F;code&gt; feature.
If you want to draw plot with some great templates, then choose &lt;code&gt;plot&lt;&#x2F;code&gt; feature.&lt;&#x2F;p&gt;
&lt;p&gt;You can choose any features simultaneously.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-easy-to-optimize&quot;&gt;2. Easy to optimize&lt;&#x2F;h3&gt;
&lt;p&gt;Peroxide uses 1D data structure to describe matrix. So, it&#x27;s too easy to integrate BLAS.
It means peroxide guarantees perfect performance for linear algebraic computations.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-friendly-syntax&quot;&gt;3. Friendly syntax&lt;&#x2F;h3&gt;
&lt;p&gt;Rust is so strange for Numpy, MATLAB, R users. Thus, it&#x27;s harder to learn the more rusty libraries.
With peroxide, you can do heavy computations with R, Numpy, MATLAB like syntax.&lt;&#x2F;p&gt;
&lt;p&gt;For example,&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;macro_use&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; peroxide;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;peroxide::prelude::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; MATLAB like matrix constructor
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;ml_matrix&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;1 2;3 4&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; R like matrix constructor (default)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;matrix&lt;&#x2F;span&gt;&lt;span&gt;(c!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, Row);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; Or use zeros
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;zeros&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    z[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    z[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2.0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    z[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;3.0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    z[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;4.0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; Simple but effective operations
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; b; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; Matrix multiplication (BLAS integrated)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; Easy to pretty print
&lt;&#x2F;span&gt;&lt;span&gt;    c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;       c[0] c[1]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; r[0]     1    3
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; r[1]     2    4
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; Easy to do linear algebra
&lt;&#x2F;span&gt;&lt;span&gt;    c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;det&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;inv&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; and etc.
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;4-can-choose-two-different-coding-styles&quot;&gt;4. Can choose two different coding styles.&lt;&#x2F;h3&gt;
&lt;p&gt;In peroxide, there are two different options.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;prelude&lt;&#x2F;code&gt;: To simple use.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;fuga&lt;&#x2F;code&gt;: To choose numerical algorithms explicitly.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For examples, let&#x27;s see norm.&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;code&gt;prelude&lt;&#x2F;code&gt;, use &lt;code&gt;norm&lt;&#x2F;code&gt; is simple: &lt;code&gt;a.norm()&lt;&#x2F;code&gt;. But it only uses L2 norm for &lt;code&gt;Vec&amp;lt;f64&amp;gt;&lt;&#x2F;code&gt;. (For &lt;code&gt;Matrix&lt;&#x2F;code&gt;, Frobenius norm.)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;macro_use&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; peroxide;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;peroxide::prelude::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;c!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; l2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;norm&lt;&#x2F;span&gt;&lt;span&gt;();      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; L2 is default vector norm
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(l2, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;sqrt&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In &lt;code&gt;fuga&lt;&#x2F;code&gt;, use various norms. But you should write longer than &lt;code&gt;prelude&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;macro_use&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; peroxide;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;peroxide::fuga::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;   
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;c!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; l1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;norm&lt;&#x2F;span&gt;&lt;span&gt;(Norm::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;L1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; l2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;norm&lt;&#x2F;span&gt;&lt;span&gt;(Norm::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;L2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; l_inf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;norm&lt;&#x2F;span&gt;&lt;span&gt;(Norm::LInf);
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(l1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(l2, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;sqrt&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(l_inf, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;5-batteries-included&quot;&gt;5. Batteries included&lt;&#x2F;h3&gt;
&lt;p&gt;Peroxide can do many things. &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Linear Algebra
&lt;ul&gt;
&lt;li&gt;Effective Matrix structure&lt;&#x2F;li&gt;
&lt;li&gt;Transpose, Determinant, Diagonal&lt;&#x2F;li&gt;
&lt;li&gt;LU Decomposition, Inverse matrix, Block partitioning&lt;&#x2F;li&gt;
&lt;li&gt;QR Decomposition (&lt;code&gt;O3&lt;&#x2F;code&gt; feature)&lt;&#x2F;li&gt;
&lt;li&gt;Singular Value Decomposition (SVD) (&lt;code&gt;O3&lt;&#x2F;code&gt; feature)&lt;&#x2F;li&gt;
&lt;li&gt;Cholesky Decomposition (&lt;code&gt;O3&lt;&#x2F;code&gt; feature)&lt;&#x2F;li&gt;
&lt;li&gt;Reduced Row Echelon form&lt;&#x2F;li&gt;
&lt;li&gt;Column, Row operations&lt;&#x2F;li&gt;
&lt;li&gt;Eigenvalue, Eigenvector&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Functional Programming
&lt;ul&gt;
&lt;li&gt;More easy functional programming with &lt;code&gt;Vec&amp;lt;f64&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;For matrix, there are three maps
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fmap&lt;&#x2F;code&gt; : map for all elements&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;col_map&lt;&#x2F;code&gt; : map for column vectors&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;row_map&lt;&#x2F;code&gt; : map for row vectors&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Automatic Differentiation
&lt;ul&gt;
&lt;li&gt;Taylor mode Forward AD - for nth order AD&lt;&#x2F;li&gt;
&lt;li&gt;Exact jacobian&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Real&lt;&#x2F;code&gt; trait to constrain for &lt;code&gt;f64&lt;&#x2F;code&gt; and &lt;code&gt;AD&lt;&#x2F;code&gt; (for ODE)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Numerical Analysis
&lt;ul&gt;
&lt;li&gt;Lagrange interpolation&lt;&#x2F;li&gt;
&lt;li&gt;Splines
&lt;ul&gt;
&lt;li&gt;Cubic Spline&lt;&#x2F;li&gt;
&lt;li&gt;Cubic Hermite Spline
&lt;ul&gt;
&lt;li&gt;Estimate slope via Akima&lt;&#x2F;li&gt;
&lt;li&gt;Estimate slope via Quadratic interpolation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Non-linear regression
&lt;ul&gt;
&lt;li&gt;Gradient Descent&lt;&#x2F;li&gt;
&lt;li&gt;Levenberg Marquardt&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Ordinary Differential Equation
&lt;ul&gt;
&lt;li&gt;Euler&lt;&#x2F;li&gt;
&lt;li&gt;Runge Kutta 4th order&lt;&#x2F;li&gt;
&lt;li&gt;Backward Euler (Implicit)&lt;&#x2F;li&gt;
&lt;li&gt;Gauss Legendre 4th order (Implicit)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Numerical Integration
&lt;ul&gt;
&lt;li&gt;Newton-Cotes Quadrature&lt;&#x2F;li&gt;
&lt;li&gt;Gauss-Legendre Quadrature (up to 30 order)&lt;&#x2F;li&gt;
&lt;li&gt;Gauss-Kronrod Quadrature (Adaptive)
&lt;ul&gt;
&lt;li&gt;G7K15, G10K21, G15K31, G20K41, G25K51, G30K61&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Root Finding
&lt;ul&gt;
&lt;li&gt;Bisection&lt;&#x2F;li&gt;
&lt;li&gt;False Position (Regula Falsi)&lt;&#x2F;li&gt;
&lt;li&gt;Secant&lt;&#x2F;li&gt;
&lt;li&gt;Newton&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Statistics
&lt;ul&gt;
&lt;li&gt;More easy random with &lt;code&gt;rand&lt;&#x2F;code&gt; crate&lt;&#x2F;li&gt;
&lt;li&gt;Ordered Statistics
&lt;ul&gt;
&lt;li&gt;Median&lt;&#x2F;li&gt;
&lt;li&gt;Quantile (Matched with R quantile)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Probability Distributions
&lt;ul&gt;
&lt;li&gt;Bernoulli&lt;&#x2F;li&gt;
&lt;li&gt;Uniform&lt;&#x2F;li&gt;
&lt;li&gt;Binomial&lt;&#x2F;li&gt;
&lt;li&gt;Normal&lt;&#x2F;li&gt;
&lt;li&gt;Gamma&lt;&#x2F;li&gt;
&lt;li&gt;Beta&lt;&#x2F;li&gt;
&lt;li&gt;Student&#x27;s-t&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;RNG algorithms
&lt;ul&gt;
&lt;li&gt;Acceptance Rejection&lt;&#x2F;li&gt;
&lt;li&gt;Marsaglia Polar&lt;&#x2F;li&gt;
&lt;li&gt;Ziggurat&lt;&#x2F;li&gt;
&lt;li&gt;Wrapper for &lt;code&gt;rand-dist&lt;&#x2F;code&gt; crate&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Confusion Matrix &amp;amp; Metrics&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Special functions
&lt;ul&gt;
&lt;li&gt;Wrapper for &lt;code&gt;puruspe&lt;&#x2F;code&gt; crate (pure rust)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Utils
&lt;ul&gt;
&lt;li&gt;R-like macro &amp;amp; functions&lt;&#x2F;li&gt;
&lt;li&gt;Matlab-like macro &amp;amp; functions&lt;&#x2F;li&gt;
&lt;li&gt;Numpy-like macro &amp;amp; functions&lt;&#x2F;li&gt;
&lt;li&gt;Julia-like macro &amp;amp; functions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Plotting
&lt;ul&gt;
&lt;li&gt;With &lt;code&gt;pyo3&lt;&#x2F;code&gt; &amp;amp; &lt;code&gt;matplotlib&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;DataFrame
&lt;ul&gt;
&lt;li&gt;Support various types simultaneously&lt;&#x2F;li&gt;
&lt;li&gt;Read &amp;amp; Write &lt;code&gt;csv&lt;&#x2F;code&gt; files (&lt;code&gt;csv&lt;&#x2F;code&gt; feature)&lt;&#x2F;li&gt;
&lt;li&gt;Read &amp;amp; Write &lt;code&gt;netcdf&lt;&#x2F;code&gt; files (&lt;code&gt;nc&lt;&#x2F;code&gt; feature)&lt;&#x2F;li&gt;
&lt;li&gt;Read &amp;amp; Write &lt;code&gt;parquet&lt;&#x2F;code&gt; files (&lt;code&gt;parquet&lt;&#x2F;code&gt; feature)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;6-compatible-with-mathematics&quot;&gt;6. Compatible with Mathematics&lt;&#x2F;h3&gt;
&lt;p&gt;After &lt;code&gt;0.23.0&lt;&#x2F;code&gt;, peroxide is compatible with mathematical structures.
&lt;code&gt;Matrix&lt;&#x2F;code&gt;, &lt;code&gt;Vec&amp;lt;f64&amp;gt;&lt;&#x2F;code&gt;, &lt;code&gt;f64&lt;&#x2F;code&gt; are considered as inner product vector spaces.
And &lt;code&gt;Matrix&lt;&#x2F;code&gt;, &lt;code&gt;Vec&amp;lt;f64&amp;gt;&lt;&#x2F;code&gt; are linear operators - &lt;code&gt;Vec&amp;lt;f64&amp;gt;&lt;&#x2F;code&gt; to &lt;code&gt;Vec&amp;lt;f64&amp;gt;&lt;&#x2F;code&gt; and &lt;code&gt;Vec&amp;lt;f64&amp;gt;&lt;&#x2F;code&gt; to &lt;code&gt;f64&lt;&#x2F;code&gt;.
For future, peroxide will include more &amp;amp; more mathematical concepts. (But still practical.)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;7-written-in-rust&quot;&gt;7. Written in Rust&lt;&#x2F;h3&gt;
&lt;p&gt;Rust &amp;amp; Cargo are awesome for scientific computations. 
You can use any external packages easily with Cargo, not make.
And default runtime performance of Rust is also great. If you use many iterations for computations,
then Rust become great choice.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;latest-readme-version&quot;&gt;Latest README version&lt;&#x2F;h2&gt;
&lt;p&gt;Corresponding to &lt;code&gt;0.32.0&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pre-requisite&quot;&gt;Pre-requisite&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;For &lt;code&gt;O3&lt;&#x2F;code&gt; feature - Need &lt;code&gt;OpenBLAS&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;For &lt;code&gt;plot&lt;&#x2F;code&gt; feature - Need &lt;code&gt;matplotlib&lt;&#x2F;code&gt; of python&lt;&#x2F;li&gt;
&lt;li&gt;For &lt;code&gt;nc&lt;&#x2F;code&gt; feature - Need &lt;code&gt;netcdf&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;install&quot;&gt;Install&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Run below commands in your project directory&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol&gt;
&lt;li&gt;Default&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span&gt; add peroxide
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;OpenBLAS&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span&gt; add peroxide&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --features&lt;&#x2F;span&gt;&lt;span&gt; O3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Plot&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span&gt; add peroxide&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --features&lt;&#x2F;span&gt;&lt;span&gt; plot
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;NetCDF dependency for DataFrame&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span&gt; add peroxide&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --features&lt;&#x2F;span&gt;&lt;span&gt; nc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;CSV dependency for DataFrame&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span&gt; add peroxide&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --features&lt;&#x2F;span&gt;&lt;span&gt; csv
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Parquet dependency for DataFrame&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span&gt; add peroxide&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --features&lt;&#x2F;span&gt;&lt;span&gt; parquet
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;All features&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span&gt; add peroxide&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --features &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;O3 plot nc csv parquet&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;useful-tips-for-features&quot;&gt;Useful tips for features&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;If you want to use &lt;em&gt;QR&lt;&#x2F;em&gt; or &lt;em&gt;SVD&lt;&#x2F;em&gt; or &lt;em&gt;Cholesky Decomposition&lt;&#x2F;em&gt; then should use &lt;code&gt;O3&lt;&#x2F;code&gt; feature (there are no implementations for these decompositions in &lt;code&gt;default&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;If you want to write your numerical results, then use &lt;code&gt;parquet&lt;&#x2F;code&gt; or &lt;code&gt;nc&lt;&#x2F;code&gt; features (corresponding to &lt;code&gt;parquet&lt;&#x2F;code&gt; or &lt;code&gt;netcdf&lt;&#x2F;code&gt; format. (It is much more effective than &lt;code&gt;csv&lt;&#x2F;code&gt; and &lt;code&gt;json&lt;&#x2F;code&gt;.)&lt;&#x2F;li&gt;
&lt;li&gt;To plot, use &lt;code&gt;parquet&lt;&#x2F;code&gt; or &lt;code&gt;nc&lt;&#x2F;code&gt; feature to export data as parquet or netcdf format and use python to draw plot.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;plot&lt;&#x2F;code&gt; feature has limited plot abilities.&lt;&#x2F;li&gt;
&lt;li&gt;To read parquet file in python, use &lt;code&gt;pandas&lt;&#x2F;code&gt; &amp;amp; &lt;code&gt;pyarrow&lt;&#x2F;code&gt; libraries.&lt;&#x2F;li&gt;
&lt;li&gt;There is a template of python code for netcdf. - &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Axect&#x2F;Socialst&#x2F;blob&#x2F;master&#x2F;Templates&#x2F;PyPlot_Template&#x2F;nc_plot.py&quot;&gt;Socialst&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;documentation&quot;&gt;Documentation&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;peroxide.surge.sh&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;peroxide&#x2F;badge.svg&quot; alt=&quot;On docs.rs&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;example&quot;&gt;Example&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Axect&#x2F;Peroxide_Gallery&quot;&gt;Peroxide Gallery&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;version-info&quot;&gt;Version Info&lt;&#x2F;h2&gt;
&lt;p&gt;To see &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Axect&#x2F;Peroxide&#x2F;blob&#x2F;master&#x2F;RELEASES.md&quot;&gt;RELEASES.md&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Forger</title>
        <published>2023-11-17T00:00:00+00:00</published>
        <updated>2023-11-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://axect.github.io/cv/projects/forger/"/>
        <id>https://axect.github.io/cv/projects/forger/</id>
        
        <content type="html" xml:base="https://axect.github.io/cv/projects/forger/"></content>
        
    </entry>
    <entry xml:lang="en">
        <title>DeeLeMa</title>
        <published>2023-11-10T00:00:00+00:00</published>
        <updated>2023-11-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://axect.github.io/cv/projects/deelema/"/>
        <id>https://axect.github.io/cv/projects/deelema/</id>
        
        <content type="html" xml:base="https://axect.github.io/cv/projects/deelema/">&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;&#x2F;h2&gt;
&lt;p&gt;$\textsf{DeeLeMa}$ is a deep learning network designed to analyze energies and momenta in particle collisions at high-energy colliders. Built with a foundation on symmetric event topology, $\textsf{DeeLeMa}$&#x27;s generated mass distributions demonstrate robust peaks at the physical masses, even after accounting for combinatoric uncertainties and detector smearing effects. With its adaptability to different event topologies, $\textsf{DeeLeMa}$&#x27;s effectiveness shines when corresponding kinematic symmetries are adopted.&lt;&#x2F;p&gt;
&lt;p&gt;The current version of $\textsf{DeeLeMa}$ (v1.0.0) is constructed on the $t\bar{t}$-like antler event topology which is shown below figure.&lt;&#x2F;p&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;github.com&#x2F;Yonsei-HEP-COSMO&#x2F;DeeLeMa&#x2F;blob&#x2F;main&#x2F;img&#x2F;topology.png?raw=true&quot; width=&quot;350&quot;&gt;
    &lt;br&gt;
    &lt;m&gt;$t\bar{t}$-like antler event topology&lt;&#x2F;m&gt;
&lt;&#x2F;p&gt;
&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;using-pip&quot;&gt;Using Pip&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pip3&lt;&#x2F;span&gt;&lt;span&gt; install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -r&lt;&#x2F;span&gt;&lt;span&gt; requirements.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;using-pdm-recommended&quot;&gt;Using PDM (Recommended)&lt;&#x2F;h3&gt;
&lt;p&gt;If you haven&#x27;t installed &lt;code&gt;pdm&lt;&#x2F;code&gt; yet:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;# Linux &#x2F; Mac
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;curl -sSL&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;pdm.fming.dev&#x2F;install-pdm.py &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;python3&lt;&#x2F;span&gt;&lt;span&gt; -
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;# Windows
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Invoke-WebRequest -Uri&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;pdm.fming.dev&#x2F;install-pdm.py&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -UseBasicParsing&lt;&#x2F;span&gt;&lt;span&gt;).Content &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;python&lt;&#x2F;span&gt;&lt;span&gt; -
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With PDM installed:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;# Install dependencies from pyproject.toml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pdm&lt;&#x2F;span&gt;&lt;span&gt; install
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;# Activate virtual environment (venv)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span&gt; .venv&#x2F;bin&#x2F;activate
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Clone the Repository&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; clone https:&#x2F;&#x2F;github.com&#x2F;Yonsei-HEP-COSMO&#x2F;DeeLeMa.git
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Install Dependencies&lt;&#x2F;strong&gt;: &lt;&#x2F;p&gt;
&lt;p&gt;Follow the &lt;a href=&quot;https:&#x2F;&#x2F;axect.github.io&#x2F;cv&#x2F;projects&#x2F;deelema&#x2F;#requirements&quot;&gt;Requirements&lt;&#x2F;a&gt; section for instructions.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Training&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;⚠️ &lt;strong&gt;Caution&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Before training, ensure you modify the data path in &lt;code&gt;train.py&lt;&#x2F;code&gt; to point to the location of your data.
For more details, refer to &lt;a href=&quot;https:&#x2F;&#x2F;axect.github.io&#x2F;cv&#x2F;projects&#x2F;deelema&#x2F;.&#x2F;train.py&quot;&gt;&lt;code&gt;train.py&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;To train the model, execute the following command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;python&lt;&#x2F;span&gt;&lt;span&gt; train.py
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Monitoring&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;To monitor the training process, run &lt;code&gt;tensorboard&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;tensorboard --logdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;logs&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;⚠️ &lt;strong&gt;Caution&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you use PDM then should run tensorboard in activated virtual environment.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;citation&quot;&gt;Citation&lt;&#x2F;h2&gt;
&lt;p&gt;If $\textsf{DeeLeMa}$ benefits your research, please acknowledge our efforts by citing the following paper:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bibtex&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bibtex &quot;&gt;&lt;code class=&quot;language-bibtex&quot; data-lang=&quot;bibtex&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;@article&lt;&#x2F;span&gt;&lt;span&gt;{Ban:2022hfk,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;author &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Ban, Kayoung and Kang, Dong Woo and Kim, Tae-Geun and Park, Seong Chan and Park, Yeji&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;title &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;{DeeLeMa: Missing Information Search with Deep Learning for Mass Estimation}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;eprint &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;2212.12836&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;archivePrefix &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;arXiv&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;primaryClass &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;hep-ph&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;month &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;12&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;year &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;2022&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;K. Ban, D. W. Kang, T.-G Kim, S. C. Park, and Y. Park,  &lt;em&gt;DeeLeMa: Missing Information Search with Deep Learning for Mass Estimation&lt;&#x2F;em&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;2212.12836&quot;&gt;arXiv:2212.12836&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;license&quot;&gt;License&lt;&#x2F;h2&gt;
&lt;p&gt;$\textsf{DeeLeMa}$ is released under the MIT License. For more details, see the &lt;code&gt;LICENSE&lt;&#x2F;code&gt; file in the repository.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Radient</title>
        <published>2023-11-09T00:00:00+00:00</published>
        <updated>2023-11-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://axect.github.io/cv/projects/radient/"/>
        <id>https://axect.github.io/cv/projects/radient/</id>
        
        <content type="html" xml:base="https://axect.github.io/cv/projects/radient/"></content>
        
    </entry>
    <entry xml:lang="en">
        <title>Unsupervised seq2seq learning for automatic SQA introduces multi-channel EIT monitoring</title>
        <published>2023-05-16T00:00:00+00:00</published>
        <updated>2023-05-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://axect.github.io/cv/publications/eit-anomaly-paper/"/>
        <id>https://axect.github.io/cv/publications/eit-anomaly-paper/</id>
        
        <content type="html" xml:base="https://axect.github.io/cv/publications/eit-anomaly-paper/">&lt;h2 id=&quot;authors&quot;&gt;Authors&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;First authors
&lt;ul&gt;
&lt;li&gt;Chang Min Hyun (Yonsei University, South Korea)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;axect.github.io&quot;&gt;&lt;strong&gt;Tae-Geun Kim&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (Yonsei University, South Korea)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Corresponding authors
&lt;ul&gt;
&lt;li&gt;Chang Min Hyun (Yonsei University, South Korea)&lt;&#x2F;li&gt;
&lt;li&gt;Kyunghhun Lee (Kyung Hee University, South Korea)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;abstract&quot;&gt;Abstract&lt;&#x2F;h2&gt;
&lt;p&gt;This study proposes an unsupervised sequence-to-sequence learning approach that automatically assesses the motion-induced reliability degradation of the cardiac volume signal (CVS) in multi-channel electrical impedance-based hemodynamic monitoring. The proposed method attempts to tackle shortcomings in existing learning-based assessment approaches, such as the requirement of manual annotation for motion influence and the lack of explicit mechanisms for realizing motion-induced abnormalities under contextual variations in CVS over time. By utilizing long-short term memory and variational auto-encoder structures, an encoder--decoder model is trained not only to self-reproduce an input sequence of the CVS but also to extrapolate the future in a parallel fashion. By doing so, the model can capture contextual knowledge lying in a temporal CVS sequence while being regularized to explore a general relationship over the entire time-series. A motion-influenced CVS of low-quality is detected, based on the residual between the input sequence and its neural representation with a cut--off value determined from the two-sigma rule of thumb over the training set. Our experimental observations validated two claims: (i) in the learning environment of label-absence, assessment performance is achievable at a competitive level to the supervised setting, and (ii) the contextual information across a time series of CVS is advantageous for effectively realizing motion-induced unrealistic distortions in signal amplitude and morphology. We also investigated the capability as a pseudo-labeling tool to minimize human-craft annotation by preemptively providing strong candidates for motion-induced anomalies. Empirical evidence has shown that machine-guided annotation can reduce inevitable human-errors during manual assessment while minimizing cumbersome and time-consuming processes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;important-links&quot;&gt;Important links&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doi.org&#x2F;10.1016&#x2F;j.cmpb.2024.108079&quot;&gt;CMPB 108079&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;2305.09368&quot;&gt;ArXiv: 2305.09368&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;citation&quot;&gt;Citation&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bib&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bib &quot;&gt;&lt;code class=&quot;language-bib&quot; data-lang=&quot;bib&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;@article&lt;&#x2F;span&gt;&lt;span&gt;{HYUN2024108079,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;title         &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;{Unsupervised sequence-to-sequence learning for automatic signal quality assessment in multi-channel electrical impedance-based hemodynamic monitoring}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;journal       &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;{Computer Methods and Programs in Biomedicine}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;volume        &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;{247}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;pages         &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;{108079}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;year          &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;{2024}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;issn          &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;{0169-2607}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;doi           &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;{https:&#x2F;&#x2F;doi.org&#x2F;10.1016&#x2F;j.cmpb.2024.108079}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;url           &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;{https:&#x2F;&#x2F;www.sciencedirect.com&#x2F;science&#x2F;article&#x2F;pii&#x2F;S0169260724000750}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;author        &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;{Chang Min Hyun and Tae-Geun Kim and Kyounghun Lee}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;keywords      &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;{Cardiopulmonary monitoring, Electrical impedance, Signal quality assessment, Time-series anomaly detection, Unsupervised learning, Recurrent neural network, Variational auto-encoder}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Missing information search with deep learning for mass estimation</title>
        <published>2022-12-25T00:00:00+00:00</published>
        <updated>2022-12-25T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://axect.github.io/cv/publications/deelema-paper/"/>
        <id>https://axect.github.io/cv/publications/deelema-paper/</id>
        
        <content type="html" xml:base="https://axect.github.io/cv/publications/deelema-paper/">&lt;h2 id=&quot;authors&quot;&gt;Authors&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;First authors
&lt;ul&gt;
&lt;li&gt;Kayoung Ban (Yonsei University, South Korea)&lt;&#x2F;li&gt;
&lt;li&gt;Dongwoo Kang (KIAS, South Korea)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;axect.github.io&quot;&gt;&lt;strong&gt;Tae-Geun Kim&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (Yonsei University, South Korea)&lt;&#x2F;li&gt;
&lt;li&gt;Yeji Park (Yonsei University, South Korea)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Corresponding author
&lt;ul&gt;
&lt;li&gt;Seong Chan Park (Yonsei University, South Korea)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;abstract&quot;&gt;Abstract&lt;&#x2F;h2&gt;
&lt;p&gt;We introduce DeeLeMa, a deep learning-based network for the analysis of energy and momentum in high-energy particle collisions. This novel approach is specifically designed to address the challenge of analyzing collision events with multiple invisible particles, which are prevalent in many high-energy physics experiments. DeeLeMa is constructed based on the kinematic constraints and symmetry of the event topologies. We show that DeeLeMa can robustly estimate mass distribution even in the presence of combinatorial uncertainties and detector smearing effects. The approach is flexible and can be applied to various event topologies by leveraging the relevant kinematic symmetries. This work opens up exciting opportunities for the analysis of high-energy particle collision data, and we believe that DeeLeMa has the potential to become a valuable tool for the high-energy physics community.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;important-links&quot;&gt;Important links&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;journals.aps.org&#x2F;prresearch&#x2F;abstract&#x2F;10.1103&#x2F;PhysRevResearch.5.043186&quot;&gt;PRR: &lt;strong&gt;5&lt;&#x2F;strong&gt;, 043186&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;2212.12836&quot;&gt;ArXiv: 2212.12836&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Yonsei-HEPCOSMO&#x2F;DeeLeMa&quot;&gt;GitHub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;citation&quot;&gt;Citation&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bib&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bib &quot;&gt;&lt;code class=&quot;language-bib&quot; data-lang=&quot;bib&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;@article&lt;&#x2F;span&gt;&lt;span&gt;{Ban:2023mjy,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;author &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Ban, Kayoung and Kang, Dong Woo and Kim, Tae-Geun and Park, Seong Chan and Park, Yeji&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;title &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;{Missing information search with deep learning for mass estimation}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;doi &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;10.1103&#x2F;PhysRevResearch.5.043186&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;journal &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Phys. Rev. Res.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;volume &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;5&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;number &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;4&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;pages &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;043186&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;year &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;2023&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Axions from Primordial Black Hole</title>
        <published>2022-12-22T00:00:00+00:00</published>
        <updated>2022-12-22T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://axect.github.io/cv/publications/pbh-alp-paper/"/>
        <id>https://axect.github.io/cv/publications/pbh-alp-paper/</id>
        
        <content type="html" xml:base="https://axect.github.io/cv/publications/pbh-alp-paper/">&lt;h2 id=&quot;authors&quot;&gt;Authors&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;First authors
&lt;ul&gt;
&lt;li&gt;Yongsoo Jho (Weizmann Institute, Israel)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;axect.github.io&quot;&gt;&lt;strong&gt;Tae-Geun Kim&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (Yonsei University, South Korea)&lt;&#x2F;li&gt;
&lt;li&gt;Yeji Park (Yonsei University, South Korea)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Corresponding authors
&lt;ul&gt;
&lt;li&gt;Jong-Chul Park (Chungnam National University, South Korea)&lt;&#x2F;li&gt;
&lt;li&gt;Seong Chan Park (Yonsei University, South Korea)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;abstract&quot;&gt;Abstract&lt;&#x2F;h2&gt;
&lt;p&gt;Primordial black holes (PBHs) can be significant sources of axions and axion-like particles (ALPs) in the Universe as the Hawking radiation of the PBH includes light particles when the Hawking temperature exceeds the particle&#x27;s mass. Once produced, as axions predominantly decay into photons, we may detect the enhanced photon spectrum using sensitive detectors. We introduce a new methodology by defining the time-varying decay process for particles to fly and decay over time on a cosmological scale. This paper provides the estimated photon spectrum and the flux under some simplified assumptions about PBH, 1) monochromatic mass spectrum and 2) isotropic distribution at cosmological scales. Future detectors, such as e-ASTROGAM, have great chances of detecting the signal.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;important-links&quot;&gt;Important links&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;2212.11977&quot;&gt;ArXiv: 2212.11977&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;citation&quot;&gt;Citation&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bib&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bib &quot;&gt;&lt;code class=&quot;language-bib&quot; data-lang=&quot;bib&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;@article&lt;&#x2F;span&gt;&lt;span&gt;{Jho:2022wxd,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;author &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Jho, Yongsoo and Kim, Tae-Geun and Park, Jong-Chul and Park, Seong Chan and Park, Yeji&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;title &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;{Axions from Primordial Black Holes}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;eprint &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;2212.11977&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;archivePrefix &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;arXiv&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;primaryClass &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;hep-ph&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;month &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;12&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;year &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;2022&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
</feed>
